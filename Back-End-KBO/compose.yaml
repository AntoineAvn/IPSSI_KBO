# Docker Compose configuration file for your application

services:
  # Server service definition
  server:
    build:
      context: .
    environment:
      - NODE_ENV='production'
      - URL_MONGO=${URL_MONGO}
    ports:
      - 8080:8080
    depends_on:
      - db  # Define the dependency on the db service

  # MongoDB database service definition
  db:
    image: mongo:6.0  # You can replace this with the specific MongoDB version you need
    container_name: mongo_container
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${ROOT_USERNAME_DB}
      - MONGO_INITDB_ROOT_PASSWORD=${ROOT_PASSWORD_DB}
      - MONGO_INITDB_DATABASE=${DATABASE}
      - MONGO_USER=${USERNAME_DB}
      - MONGO_PASSWORD=${PASSWORD_DB}
    volumes:
      - mongo-data:/data/db  # Persistent storage for MongoDB
    ports:
      - 27017:27017  # Exposing the default MongoDB port
    command: >
      mongod --auth --bind_ip_all
    restart: always

    # Healthcheck for MongoDB to ensure the service is healthy before the server starts
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB seed service to initialize the database
  mongo-seed:
    image: mongo:6.0
    container_name: mongo_seed_container
    depends_on:
      - db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${ROOT_USERNAME_DB}
      - MONGO_INITDB_ROOT_PASSWORD=${ROOT_PASSWORD_DB}
    volumes:
      - ./database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: always

# Volumes for persisting data
volumes:
  mongo-data:
